PlayersList = new Mongo.Collection('players');
ladders_start=[5,9,13,19,48,60,73];
ladders_end=[26,30,56,38,69,83,89];
snakes_start = [23,50,54,65,81,94,98];
snakes_end =[4,27,24,40,58,70,67];

//isClient specify all functions used in the user console
// helpers = function; events are what we can possibly do to the app
// Session is created to store any incremental but temporary data 
// generated by events. Session refers to actions and data of the current user
if(Meteor.isClient){
	//browse thru templates in html, in this case, search for template 'leaderboard'
	Template.leaderboard.helpers({
		'player': function(){ //get the list of players created by this userID
			var currentUserId = Meteor.userId();
			return PlayersList.find({createdBy: currentUserId});
		},
		'playerLimit': function(){//check if the number of players keyed in have reached the limit
			var currentUserId = Meteor.userId();
			var numPlayers = PlayersList.find({createdBy: currentUserId}).count();
			return numPlayers == 4;
		},
		'startPlaying':function(){//activate startPlaying! button
			return Session.get('startPlaying');		
		},
		'startRolling': function(){//activate Roll button
			return Session.get('startRolling');
		},
		'restart': function(){//activate Start another game button
			return Session.get('restart');
		},
		'roll': function(){//return result of current roll;
			return Session.get('resultOfRoll');
		},
		'winner': function(){//return current winner
			var winner=Session.get('winner');
			if((winner != null)&&(winner!=undefined)){
				return winner;
			}
		},
		'rollSix':function(){//check if current Player roll a 6
			var currentPlayer = Session.get('currentPlayer');
			var rollSix=Session.get('rollSix');
			if((rollSix != null)&&(rollSix!=undefined)){
				if (currentPlayer._id===rollSix._id){
					return true;
				}
			}
		},
		'rollSixPlayer':function(){//return the player who roll a Six
			return Session.get('rollSix');		
		}, 
		'overshoot': function(){//check if currentplayer overshoot 100
			var currentPlayer=Session.get('currentPlayer');
			var overshootPlayer = Session.get('overshootPlayer');
			if((overshootPlayer != undefined)&&(overshootPlayer!=null)){
				if (currentPlayer._id===overshootPlayer._id){
					return true;
				}
			}
		},
		'duplicateScore': function(){//check if currentplayer got a duplicate score with anyone else on the list of players
			var currentPlayer=Session.get('currentPlayer');
			var duplicateScore= Session.get('duplicateScore');
			if((duplicateScore != undefined)&&(duplicateScore!=null)){
				if (currentPlayer._id===duplicateScore._id){
					return true;
				}
			}
		},
		'dupName': function(){//return player who got duplicate score
			return Session.get("duplicateScore");
		},
		'dupScore': function(){//return the duplicated score
			return Session.get('dupScore');
		},
		'overshootPlayer': function(){//return the player who overshot
			return Session.get('overshootPlayer')
		},
		'isEqual': function(a,b){//check if 2 attributes are equal
			return a ===b;
		},
		'currentPlayer': function(){//return current player
			var currentPlayer = Session.get("currentPlayer");
			if ((currentPlayer!=null)&&(currentPlayer!=undefined)){
				return currentPlayer;
			}
		},
		'finished': function(){//check ig game is finished i.e there is a winner
			var winner=Session.get('winner');
			if((winner != null)&&(winner!=undefined)){
				return true;
			}
		},
		'hitSnakes': function(){//check if there s a player who hit a snake
			var hitSnake = Session.get('hitSnake');
			if((hitSnake != undefined)&&(hitSnake !=null)){
				return true;
			}
		},
		'hitLadders': function(){//check if there s a player who hit a ladder
			var hitLadder = Session.get('hitLadder');
			if((hitLadder != undefined)&&(hitLadder!=null)){
				return true;
			}
		},
		'hitSnake': function(){//return the player who hit a snake
			var currentPlayer = Session.get('currentPlayer')._id;
			var hitSnake = Session.get('hitSnake');
			if((hitSnake != undefined)&&(hitSnake!=null)){
				if (currentPlayer===hitSnake._id){
					return hitSnake;
				}
			}
		},
		'hitLadder': function(){//return the player who hit a ladder
			var currentPlayer = Session.get('currentPlayer')._id;
			var hitLadder = Session.get('hitLadder');
			if((hitLadder != undefined)&&(hitLadder !=null)){
				if (currentPlayer===hitLadder._id){
					return hitLadder;
				}
			}
		},	
		'snakeStart': function(){//return the snake head, which the player hit
			return Session.get('snakeStart');
		},
		'snakeEnd': function(){//return the snake tail, which the player ended up at
					return Session.get('snakeEnd');
		},
		'ladderStart': function(){//return the ladder head, which the player hit
			return Session.get('ladderStart');
		},
		'ladderEnd': function(){//return the ladder tail, which the player ended up at
			return Session.get('ladderEnd');
		}
	})
	Template.leaderboard.events({
		//if clicked players, retrieve Id for this player and recorded in session
		'click .player': function(){
			var playerId = this._id;
			Session.set('selectedPlayer',playerId);
		},//if clicked startPlaying button, startPlaying button disappears, roll button appears
		'click .startPlaying': function(){
			Session.set('startPlaying',false);
			Session.set('startRolling',true);
		},
		'click .restart':function(){//if clicked restart button, clear the collection of player to start fresh for next round
			Meteor.call('removeAll');
			Session.set('winner',null); 
		},
		'click .roll': function(){//if clicked roll:
			//1. generate random roll number
			var resultOfRoll=Math.ceil(Random.fraction()*6);
			Session.set('resultOfRoll',resultOfRoll);
			//2. find the currentPlayer by index. The one with lowest index and created at earliest time will be the current Player
			var currentPlayer = PlayersList.findOne({createdBy:Meteor.userId()},{sort:{createdAt:1,myTurn:1},limit:1});
			Session.set("currentPlayer", currentPlayer);
			//3. reset all session objects to null for this session
			Session.set("snakeStart", null);
			Session.set("snakeEnd", null);
			Session.set("hitSnake", null);
			Session.set("ladderStart", null);
			Session.set("ladderEnd", null);
			Session.set("hitLadder", null);
			Session.set("duplicateScore", null);
			Session.set("dupScore", null);
			Session.set("rollSix", null);
			Session.set("overshoorPlayer", null);
			//4. check the score for this turn after adding result of Roll
			var score = currentPlayer.score+resultOfRoll;
			// there are 3 cases:
			//1. score <100 => player has not won the game or overshot the target
			if(score <100) {
				//1.1 check if the player hit a snake i.e score = snake_head in the list of snake_head
				// if score = snake_head, set the score to be the corresponding snake tail
				// and notify that the currentPlayer hit a Snake
				for (var i=0; i<snakes_start.length; i++) {
					if (score===snakes_start[i]){
						Session.set('snakeStart',snakes_start[i]);
						score= snakes_end[i];
						Session.set('snakeEnd',snakes_end[i]);
						Session.set('hitSnake',currentPlayer);
						break;
					}
				}
				//1.2 check if the player hit a ladder i.e score = ladder_head in the list of ladders_head
				// if score = snake_head, set the score to be the corresponding ladder tail
				// and notify that the currentPlayer hit a Ladder
				for (var i=0; i<ladders_start.length; i++) {
					if (score===ladders_start[i]){
						Session.set('ladderStart',ladders_start[i]);
						score= ladders_end[i];
						Session.set('ladderEnd',ladders_end[i]);
						Session.set('hitLadder',currentPlayer);
						break;
					}
				}
				//1.3 check if the score is a duplicate of current scores in player list
				var isDup = false;
				var list = PlayersList.find().fetch();
				for (var i = 0; i<list.length;i++){
					var player = list[i];
					if((player._id!=currentPlayer._id)&&(score === player.score)) {
						isDup=true;
						break;
					}
				}
				//1.4 if score is duplicate, do not update player's score for this round, and notfy that
				//the player got a duplicate score and identify the score.
				//if current player already hit a snake_head and there is another player at the snake tail, 
				//current Player wont have to travel to snake tail i.e his score remains unchanged for the round
				//similarly, if current player hit a ladder-head and there is another player at the top of the ladder
				//he wont get to travel to the top of the ladder
				if (isDup===true) {
					Session.set("duplicateScore",currentPlayer);
					Session.set("dupScore",score);
				} else {
				//if the score is not duplicate, update Player to have the score
					Meteor.call('updateScore',currentPlayer._id,score-currentPlayer.score);
				}
				//1.5 check if player rolled a 6.
				//if do not roll a 6, marked the player as having finished this round
				if (resultOfRoll!=6){
					Meteor.call('updatePlayerStatus',currentPlayer._id,1);
				} else{
				//if rolled a 6, do not mark player as having finished the round, so he can roll again
				//when roll button is clicked. Notify that currentPlayer roll a 6
					Session.set('rollSix',currentPlayer);
				}
			} else if(score===100){
				//1.6 if player reached 100 => win the game. Notify that current Player is the winner
				//enable restart button
				Meteor.call('updateScore',currentPlayer._id,resultOfRoll);
				Session.set('winner',currentPlayer);
				Session.set('restart',true);
			} else if(score>100){
				//1.7 if the player scored greater than 100 after adding current roll,
				//do not update his score for the round, notify that the player overshoots
				Session.set('overshootPlayer',currentPlayer);
				Meteor.call('updatePlayerStatus',currentPlayer._id,1);
			}
		}
	})
	//do not know the mechanism behind this, just know that the startPlaying button 
	//and roll button wont appear at the same time due to this
	Template.leaderboard.onRendered(function(){
		Session.set('startPlaying',true);
		Session.set('startRolling',false);
	})
	//add Player form: enter name, which then calls the method to createPlayer
	//clear name from the form once added to the playerlist
	Template.addPlayerForm.events({
		'submit form': function(event){
			event.preventDefault();
			var playerNameVar = event.target.playerName.value;
			Meteor.call('createPlayer',playerNameVar);
			event.target.playerName.value="";
		}
	})
	Meteor.subscribe('thePlayers');
} else if(Meteor.isServer){
	Meteor.publish('thePlayers',function(){
		var currentUserId = this.userId;
		return PlayersList.find({createdBy: currentUserId});
	});
}

Meteor.methods({
	//create player in this User's player list with atributes name, score =0, myTurn =0
	'createPlayer': function(playerNameVar){
		check(playerNameVar,String);
		var currentUserId = Meteor.userId();
		var numPlayers = PlayersList.find({createdBy: currentUserId}).count();
		if(currentUserId&&numPlayers<4){
			PlayersList.insert({
				name : playerNameVar,
				score: 0,
				myTurn: 0,
				createdBy: currentUserId
			})
		}
	},
	//increment player score with the given value
	'updateScore':function(selectedPlayer,scoreValue){
		check(selectedPlayer, String);
		check(scoreValue, Number);
		var currentUserId = Meteor.userId();
		if(currentUserId){
			PlayersList.update({_id: selectedPlayer,createdBy: currentUserId}, {$inc:{score: scoreValue}});	
		}
	},
	//increment the player's index once he has finished his turn
	'updatePlayerStatus': function(selectedPlayer,option){
		check(selectedPlayer,String);
		var currentUserId=Meteor.userId();
		if(currentUserId){
			PlayersList.update({_id: selectedPlayer,createdBy: currentUserId},{$inc: {myTurn:option}});
		}
	},
	//remove all player from player list
	'removeAll': function(){
		var currentUserId=Meteor.userId();
		PlayersList.remove({createdBy: currentUserId});
	}
})


